---
- hosts: servers
  become: true

  tasks:

#  - name: install required packages (DEB)
#    package:
#      name:
#        - compat-openssl10
#      state: present
#    when: "ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'"

  - name: install required packages (RPM)
    package:
      name:
        - compat-openssl10
        - freeglut
        - libcanberra-gtk2
        - make
        - mesa-libGLU
        - pygtk2
        - python2
      state: present
    when: "ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora'"

# Amazon linux doesn't have compat-openssl10 or something similar
# It doesn't appear that the fahclient actually needs it
  - name: install required packages (RPM)
    package:
      name:
        - freeglut
        - libcanberra-gtk2
        - make
        - mesa-libGLU
        - pygtk2
        - python2
      state: present
    when: "ansible_distribution == 'Amazon'"

  - name: Gather package facts
    package_facts:
      manager: auto

  - name: download packages for the FaH client
    get_url:
      url: "{{ item }}"
      dest: /tmp
    with_items: "{{ fah_pkgs[ ansible_distribution ] }}"
    when: "'fahclient' not in ansible_facts.packages"

  - name: install FaH packages (RPM)
    command: "rpm -ivh --nodeps --noscripts /tmp/{{ item | regex_replace( '.*fah', 'fah' ) }}"
    with_items: "{{ fah_pkgs[ ansible_distribution ] }}"
    when: "'fahclient' not in ansible_facts.packages and ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora' or ansible_distribution == 'Amazon'"

  - name: install FaH packages (DEB)
    apt:
#      deb: "{{ item }}"
      deb: "/tmp/{{ item | regex_replace( '.*fah', 'fah' ) }}"
#    package:
#      name: "/tmp/{{ item | regex_replace( '.*fah', 'fah' ) }}"
    with_items: "{{ fah_pkgs[ ansible_distribution ] }}"
    when: "'fahclient' not in ansible_facts.packages and ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'"

  - name: Ensure group "somegroup" exists
    group:
      name: fahclient
      state: present
      system: true
    when: "'fahclient' not in ansible_facts.packages and ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora' or ansible_distribution == 'Amazon'"

  - name: Create fahclient user
    user:
      name: fahclient
      state: present
      group: fahclient
      comment: "Folding@home Client"
      shell: /sbin/nologin
      expires: -1
      system: true
    when: "'fahclient' not in ansible_facts.packages and ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora' or ansible_distribution == 'Amazon'"

  - name: Create fahclient directories
    file:
      path: "{{ item }}"
      state: directory
      owner: fahclient
      group: fahclient
      mode: 0775
    with_items:
      - /var/lib/fahclient
      - /etc/fahclient
    when: "'fahclient' not in ansible_facts.packages and ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora' or ansible_distribution == 'Amazon'"

  - name: Stop FaH client
    service:
      name: FAHClient
      state: stopped
    when: "'fahclient' not in ansible_facts.packages and ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'"

  - name: Wait for termination of all FaH client processes
    wait_for:
      path: /var/run/fahclient.pid
      state: absent

  - name: Install FaH config
    template:
      src: sample-config.xml.j2
      dest: /etc/fahclient/config.xml

  - name: Check to see if the init script exists
    stat:
      path: /etc/init.d/FAHClient
    register: initscript

  - name: Copy default init script to docs directory
    copy:
      remote_src: true
      src: /etc/init.d/FAHClient
      dest: /usr/share/doc/fahclient/FAHClient.init
    when: initscript.stat.exists

  - name: Remove init script
    file:
      path: /etc/init.d/FAHClient
      state: absent

  - name: Install FaH systemd service file
    copy:
      src: FAHClient.service
      dest: /etc/systemd/system/FAHClient.service

  - name: Open firewalld port
    firewalld:
      immediate: true
      port: '36330/tcp'
      permanent: true
      state: enabled
    when: "ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora'"

  - name: Open UFW port
    ufw:
      rule: allow
      port: '36330'
      proto: tcp
    when: "ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'"

  - name: Start and enable FaH client
    service:
      name: FAHClient
      daemon_reload: true
      enabled: true
      state: started

...
